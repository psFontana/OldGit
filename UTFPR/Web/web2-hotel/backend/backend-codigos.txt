backend>routers>api>usuario.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/usuario");
const auth = require("../../../web2-hotel/backend/middlewares/authToken");

router.post("/login", controller.login);
router.get("/usuarios", auth.verificarToken, controller.listar);
router.post("/usuarios", auth.verificarToken, controller.criar);
router.get("/usuarios/:id", auth.verificarToken, controller.detalhar);
router.put("/usuarios/:id", auth.verificarToken, controller.atualizar);
router.delete("/usuarios/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>restaurante.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/restaurante");
const auth = require("../../../web2-hotel/backend/middlewares/authToken");

// Rotas da API para Restaurante
router.get("/", auth.isLogado, controller.listar); // Lista todos os restaurantes
router.get("/:id", auth.isLogado, controller.obter); // Obtém um restaurante específico
router.post("/", auth.isAdmin, controller.criar); // Cria um novo restaurante
router.put("/:id", auth.isAdmin, controller.atualizar); // Atualiza um restaurante existente
router.delete("/:id", auth.isAdmin, controller.excluir); // Exclui um restaurante

module.exports = router;
```

backend>routers>api>pedido.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/pedido.js");
const auth = require("../../../web2-hotel/backend/middlewares/authToken.js");

router.post("/", auth.verificarToken, controller.criar);
router.get("/", auth.verificarToken, controller.listar);
router.get("/:id", auth.verificarToken, controller.detalhar);
router.put("/:id", auth.verificarToken, controller.atualizar);
router.delete("/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>endereco.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../controllers/api/endereco");
const auth = require("../../middlewares/authToken");

router.post("/", auth.verificarToken, controller.criar);
router.get("/", auth.verificarToken, controller.listar);
router.get("/:id", auth.verificarToken, controller.detalhar);
router.put("/:id", auth.verificarToken, controller.atualizar);
router.delete("/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>favorito.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../controllers/api/favorito");
const auth = require("../../middlewares/authToken");

router.post("/", auth.verificarToken, controller.criar);
router.get("/", auth.verificarToken, controller.listar);
router.delete("/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>prato.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/prato");
const auth = require("../../../web2-hotel/backend/middlewares/authToken");

router.post("/", auth.verificarToken, controller.criar);
router.get("/", auth.verificarToken, controller.listar);
router.get("/:id", auth.verificarToken, controller.detalhar);
router.put("/:id", auth.verificarToken, controller.atualizar);
router.delete("/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>usuarioEndereco.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/usuarioEndereco");
const auth = require("../../../web2-hotel/backend/middlewares/authToken");

router.post("/", auth.verificarToken, controller.criar);
router.get("/", auth.verificarToken, controller.listar);
router.delete("/:id", auth.verificarToken, controller.excluir);

module.exports = router;
```

backend>routers>api>usuarioRestaurante.js:
```
const express = require("express");
const router = express.Router();
const controller = require("../../../web2-hotel/backend/controllers/api/usuarioRestaurante");
const auth = require("../../../web2-hotel/backend/middlewares/authToken");

router.post("/vincular", auth.verificarToken, controller.vincular);
router.post("/desvincular", auth.verificarToken, controller.desvincular);
router.get("/", auth.verificarToken, controller.listar);

module.exports = router;
```

backend>controllers>api>endereco.js:
```
const db = require("../../config/db_sequelize");

module.exports = {
  async criar(req, res) {
    try {
      const novoEndereco = await db.Enderecos.create(req.body);
      res.status(201).json(novoEndereco);
    } catch (error) {
      console.error("Erro ao criar endereço:", error);
      res.status(500).send("Erro interno");
    }
  },

  async listar(req, res) {
    try {
      const enderecos = await db.Enderecos.findAll();
      res.json(enderecos);
    } catch (error) {
      console.error("Erro ao listar endereços:", error);
      res.status(500).send("Erro interno");
    }
  },

  async detalhar(req, res) {
    try {
      const endereco = await db.Enderecos.findByPk(req.params.id);
      if (!endereco) return res.status(404).json({ erro: "Endereço não encontrado" });
      res.json(endereco);
    } catch (error) {
      console.error("Erro ao detalhar endereço:", error);
      res.status(500).send("Erro interno");
    }
  },

  async atualizar(req, res) {
    try {
      await db.Enderecos.update(req.body, { where: { id: req.params.id } });
      res.json({ mensagem: "Endereço atualizado com sucesso" });
    } catch (error) {
      console.error("Erro ao atualizar endereço:", error);
      res.status(500).send("Erro interno");
    }
  },

  async excluir(req, res) {
    try {
      await db.Enderecos.destroy({ where: { id: req.params.id } });
      res.status(204).send();
    } catch (error) {
      console.error("Erro ao excluir endereço:", error);
      res.status(500).send("Erro interno");
    }
  }
};
```

backend>controllers>api>favorito.js:
```
const db = require("../../config/db_sequelize");

module.exports = {
  async criar(req, res) {
    try {
      const novoFavorito = await db.Favoritos.create(req.body);
      res.status(201).json(novoFavorito);
    } catch (error) {
      console.error("Erro ao criar favorito:", error);
      res.status(500).send("Erro interno");
    }
  },

  async listar(req, res) {
    try {
      const favoritos = await db.Favoritos.findAll();
      res.json(favoritos);
    } catch (error) {
      console.error("Erro ao listar favoritos:", error);
      res.status(500).send("Erro interno");
    }
  },

  async excluir(req, res) {
    try {
      await db.Favoritos.destroy({ where: { id: req.params.id } });
      res.status(204).send();
    } catch (error) {
      console.error("Erro ao excluir favorito:", error);
      res.status(500).send("Erro interno");
    }
  }
};
```

backend>controllers>api>pedido.js:
```
const PedidoNoSQL = require("../../models/noSql/pedidos");

module.exports = {
  async criar(req, res) {
    try {
      const novoPedido = await PedidoNoSQL.create(req.body);
      res.status(201).json(novoPedido);
    } catch (error) {
      console.error("Erro ao criar pedido:", error);
      res.status(500).send("Erro interno");
    }
  },

  async listar(req, res) {
    try {
      const pedidos = await PedidoNoSQL.find();
      res.json(pedidos);
    } catch (error) {
      console.error("Erro ao listar pedidos:", error);
      res.status(500).send("Erro interno");
    }
  },

  async detalhar(req, res) {
    try {
      const pedido = await PedidoNoSQL.findById(req.params.id);
      if (!pedido) return res.status(404).json({ erro: "Pedido não encontrado" });
      res.json(pedido);
    } catch (error) {
      console.error("Erro ao detalhar pedido:", error);
      res.status(500).send("Erro interno");
    }
  },

  async atualizar(req, res) {
    try {
      const pedidoAtualizado = await PedidoNoSQL.findByIdAndUpdate(req.params.id, req.body, { new: true });
      if (!pedidoAtualizado) return res.status(404).json({ erro: "Pedido não encontrado" });
      res.json(pedidoAtualizado);
    } catch (error) {
      console.error("Erro ao atualizar pedido:", error);
      res.status(500).send("Erro interno");
    }
  },

  async excluir(req, res) {
    try {
      await PedidoNoSQL.findByIdAndDelete(req.params.id);
      res.status(204).send();
    } catch (error) {
      console.error("Erro ao excluir pedido:", error);
      res.status(500).send("Erro interno");
    }
  }
};
```

backend>controllers>api>prato.js:
```
const db = require("../../config/db_sequelize");

module.exports = {
  async criar(req, res) {
    try {
      const novoPrato = await db.Prato.create(req.body);
      res.status(201).json(novoPrato);
    } catch (error) {
      console.error("Erro ao criar prato:", error);
      res.status(500).send("Erro interno");
    }
  },

  async listar(req, res) {
    try {
      const pratos = await db.Prato.findAll();
      res.json(pratos);
    } catch (error) {
      console.error("Erro ao listar pratos:", error);
      res.status(500).send("Erro interno");
    }
  },

  async detalhar(req, res) {
    try {
      const prato = await db.Prato.findByPk(req.params.id);
      if (!prato) return res.status(404).json({ erro: "Prato não encontrado" });
      res.json(prato);
    } catch (error) {
      console.error("Erro ao detalhar prato:", error);
      res.status(500).send("Erro interno");
    }
  },

  async atualizar(req, res) {
    try {
      await db.Prato.update(req.body, { where: { id: req.params.id } });
      res.json({ mensagem: "Prato atualizado com sucesso" });
    } catch (error) {
      console.error("Erro ao atualizar prato:", error);
      res.status(500).send("Erro interno");
    }
  },

  async excluir(req, res) {
    try {
      await db.Prato.destroy({ where: { id: req.params.id } });
      res.status(204).send();
    } catch (error) {
      console.error("Erro ao excluir prato:", error);
      res.status(500).send("Erro interno");
    }
  }
};
```

backend>controllers>api>restaurante.js:
```
const db = require("../../config/db_sequelize");
const Restaurante = db.Restaurante;

module.exports = {
  async listar(req, res) {
    try {
      const dados = await Restaurante.findAll();
      res.status(200).json(dados);
    } catch (err) {
      res.status(500).json({ erro: "Erro ao listar restaurantes" });
    }
  },

  async obter(req, res) {
    try {
      const dado = await Restaurante.findByPk(req.params.id);
      if (!dado) return res.status(404).json({ erro: "Não encontrado" });
      res.status(200).json(dado);
    } catch (err) {
      res.status(500).json({ erro: "Erro ao buscar restaurante" });
    }
  },

  async criar(req, res) {
    try {
      const novo = await Restaurante.create(req.body);
      res.status(201).json(novo);
    } catch (err) {
      res.status(400).json({ erro: "Erro ao criar restaurante" });
    }
  },

  async atualizar(req, res) {
    try {
      const atualizado = await Restaurante.update(req.body, {
        where: { id: req.params.id },
      });
      res.status(200).json({ mensagem: "Atualizado com sucesso" });
    } catch (err) {
      res.status(400).json({ erro: "Erro ao atualizar restaurante" });
    }
  },

  async excluir(req, res) {
    try {
      await Restaurante.destroy({ where: { id: req.params.id } });
      res.status(204).send();
    } catch (err) {
      res.status(500).json({ erro: "Erro ao excluir restaurante" });
    }
  },
};
```

backend>controllers>api>usuario.js:
```
const db = require("../../config/db_sequelize");
const { gerarToken } = require("../../middlewares/authToken");

module.exports = {
  async login(req, res) {
    const { email, senha } = req.body;
    const usuario = await db.Usuario.findOne({ where: { email, senha } });
    if (!usuario) return res.status(401).json({ erro: "Credenciais inválidas" });

    const token = gerarToken(usuario);
    res.json({ token });
  },

  async listar(req, res) {
    const usuarios = await db.Usuario.findAll();
    res.json(usuarios);
  },

  async criar(req, res) {
    const novo = await db.Usuario.create(req.body);
    res.status(201).json(novo);
  },

  async detalhar(req, res) {
    const usuario = await db.Usuario.findByPk(req.params.id);
    if (!usuario) return res.status(404).json({ erro: "Usuário não encontrado" });
    res.json(usuario);
  },

  async atualizar(req, res) {
    const atualizado = await db.Usuario.update(req.body, {
      where: { id: req.params.id }
    });
    res.json({ atualizado });
  },

  async excluir(req, res) {
    await db.Usuario.destroy({ where: { id: req.params.id } });
    res.status(204).send();
  }
};
```

backend>controllers>api>usuarioEndereco.js:
```
const db = require("../../config/db_sequelize");

module.exports = {
  async criar(req, res) {
    try {
      const novoUsuarioEndereco = await db.UsuarioEndereco.create(req.body);
      res.status(201).json(novoUsuarioEndereco);
    } catch (error) {
      console.error("Erro ao criar usuário-endereço:", error);
      res.status(500).send("Erro interno");
    }
  },

  async listar(req, res) {
    try {
      const usuarioEnderecos = await db.UsuarioEndereco.findAll();
      res.json(usuarioEnderecos);
    } catch (error) {
      console.error("Erro ao listar usuário-endereços:", error);
      res.status(500).send("Erro interno");
    }
  },

  async excluir(req, res) {
    try {
      await db.UsuarioEndereco.destroy({ where: { id: req.params.id } });
      res.status(204).send();
    } catch (error) {
      console.error("Erro ao excluir usuário-endereço:", error);
      res.status(500).send("Erro interno");
    }
  }
};
```

backend>controllers>api>usuarioRestaurante.js:
```
const UsuarioMongo = require("../../models/noSql/usuario");
const RestauranteMongo = require("../../models/noSql/restaurante");

module.exports = {
  async vincular(req, res) {
    try {
      const { usuarioId, restauranteId } = req.body;

      if (!usuarioId || isNaN(restauranteId)) {
        return res.status(400).json({ error: "Dados inválidos" });
      }

      const usuario = await UsuarioMongo.findOne({ id: usuarioId });
      const restaurante = await RestauranteMongo.findOne({ id: restauranteId });

      if (!usuario || !restaurante) {
        return res.status(404).json({ error: "Usuário ou restaurante não encontrado" });
      }

      await UsuarioMongo.updateOne(
        { id: usuarioId },
        { $addToSet: { restaurantes: restauranteId } }
      );

      return res.status(201).json({ message: "Restaurante vinculado com sucesso" });
    } catch (error) {
      console.error("Erro ao vincular restaurante:", error);
      return res.status(500).json({ error: "Erro interno" });
    }
  },

  async listar(req, res) {
    try {
      const usuarios = await UsuarioMongo.find();

      const usuariosComRestaurantes = await Promise.all(
        usuarios.map(async (usuario) => {
          const restaurantes = await RestauranteMongo.find({
            id: { $in: usuario.restaurantes || [] }
          });

          return {
            ...usuario.toObject(),
            restaurantes: restaurantes.map(r => r.toObject())
          };
        })
      );

      return res.json(usuariosComRestaurantes);
    } catch (error) {
      console.error("Erro ao listar vínculos:", error);
      return res.status(500).json({ error: "Erro interno" });
    }
  },

  async desvincular(req, res) {
    try {
      const { usuarioId, restauranteId } = req.body;

      if (!usuarioId || isNaN(restauranteId)) {
        return res.status(400).json({ error: "Dados inválidos" });
      }

      const usuario = await UsuarioMongo.findOne({ id: usuarioId });

      if (!usuario) {
        return res.status(404).json({ error: "Usuário não encontrado" });
      }

      await UsuarioMongo.updateOne(
        { id: usuarioId },
        { $pull: { restaurantes: restauranteId } }
      );

      return res.status(200).json({ message: "Restaurante desvinculado com sucesso" });
    } catch (error) {
      console.error("Erro ao desvincular restaurante:", error);
      return res.status(500).json({ error: "Erro interno" });
    }
  }
};
```
backend>config>db_mongoose.js:
```
const mongoose = require("mongoose");

const url = "mongodb://localhost:27017/Web2_PF";

mongoose
  .connect(url, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("🟢 MongoDB conectado!"))
  .catch((err) => console.error("🔴 Erro ao conectar MongoDB:", err));

module.exports = mongoose;
```

backend>config>db_sequelize.js:
```
const Sequelize = require('sequelize');
const sequelize = new Sequelize('Web2_PF', 'postgres', 'postgres', {
  host: 'localhost',
  dialect: 'postgres'
});

const db = {};

db.Sequelize = Sequelize;
db.sequelize = sequelize;

// Models (relacionais)
db.Enderecos = require('../models/relational/enderecos.js')(sequelize, Sequelize);
db.Favoritos = require('../models/relational/favoritos.js')(sequelize, Sequelize);
db.Pedido = require('../models/relational/pedido.js')(sequelize, Sequelize);
db.Prato = require('../models/relational/prato.js')(sequelize, Sequelize);
db.Restaurante = require('../models/relational/restaurante.js')(sequelize, Sequelize);
db.UsuarioEndereco = require('../models/relational/usuario_endereco.js')(sequelize, Sequelize);
db.Usuario = require('../models/relational/usuario.js')(sequelize, Sequelize);

// Associações
db.Usuario.belongsToMany(db.Enderecos, { through: db.UsuarioEndereco, foreignKey: 'id_usuario', otherKey: 'id_endereco', as: 'enderecos' });

db.Enderecos.belongsToMany(db.Usuario, { through: db.UsuarioEndereco, foreignKey: 'id_endereco', otherKey: 'id_usuario', as: 'usuarios' });

db.Usuario.hasMany(db.Pedido, { foreignKey: 'id_usuario', as: 'pedidos' });

db.Pedido.belongsTo(db.Usuario, { foreignKey: 'id_usuario', as: 'usuario' });

db.Restaurante.hasMany(db.Pedido, { foreignKey: 'id_restaurante', as: 'pedidos' });

db.Pedido.belongsTo(db.Restaurante, { foreignKey: 'id_restaurante', as: 'restaurante' });

db.Restaurante.hasMany(db.Prato, { foreignKey: 'id_restaurante', as: 'pratos' });

db.Prato.belongsTo(db.Restaurante, { foreignKey: 'id_restaurante', as: 'restaurante' });

db.Usuario.hasMany(db.Favoritos, { foreignKey: 'id_usuario', as: 'favoritos' });

db.Favoritos.belongsTo(db.Usuario, { foreignKey: 'id_usuario', as: 'usuario' });

db.Restaurante.hasMany(db.Favoritos, { foreignKey: 'id_restaurante', as: 'favoritos' });

db.Favoritos.belongsTo(db.Restaurante, { foreignKey: 'id_restaurante', as: 'restaurante' });

module.exports = db;
```


backend>middlewares>accessControl.js:
```
module.exports = (allowedProfiles) => {
  return (req, res, next) => {
    const user = req.session.usuario;

    if (!user) {
      return res.redirect("/login");
    }

    if (!allowedProfiles.includes(user.perfil)) {
      return res.status(403).send("Acesso negado.");
    }

    next();
  };
};
```

backend>middlewares>authToken.js:
```
const jwt = require("jsonwebtoken");
const SECRET = "seuSegredoSuperSeguro"; // Ideal: use process.env.JWT_SECRET

module.exports = {
  gerarToken(usuario) {
    return jwt.sign({ id: usuario.id, perfil: usuario.perfil }, SECRET, { expiresIn: "2h" });
  },

  verificarToken(req, res, next) {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ erro: "Token não fornecido" });

    jwt.verify(token, SECRET, (err, decoded) => {
      if (err) return res.status(403).json({ erro: "Token inválido" });
      req.usuario = decoded;
      next();
    });
  },

  isLogado(req, res, next) {
    module.exports.verificarToken(req, res, next);
  },

  isAdmin(req, res, next) {
    module.exports.verificarToken(req, res, () => {
      if (req.usuario.perfil === "admin") {
        next();
      } else {
        res.status(403).json({ erro: "Acesso restrito a administradores" });
      }
    });
  },

  isDono(req, res, next) {
    module.exports.verificarToken(req, res, () => {
      if (req.usuario.perfil === "dono") {
        next();
      } else {
        res.status(403).json({ erro: "Acesso restrito a donos de restaurante" });
      }
    });
  },

  isCliente(req, res, next) {
    module.exports.verificarToken(req, res, () => {
      if (req.usuario.perfil === "cliente") {
        next();
      } else {
        res.status(403).json({ erro: "Acesso restrito a clientes" });
      }
    });
  }
};
```

backend>middlewares>middlewares.js:
```
module.exports = {
  logRegister(req, res, next) {
    console.log(req.url + req.method + new Date())
    next();
  },
  sessionControl(req, res, next) {
    if (req.session.login != undefined) next();
    else if ((req.url == '/') && (req.method == 'GET')) next();
    else if ((req.url == '/login') && (req.method == 'POST')) next();
    else if ((req.url).split('/')[1] == 'recuperarSenha') next();
    else res.redirect('/');
  }
};
```

backend>middlewares>sessionControl.js:
```
module.exports = (req, res, next) => {
  const user = req.session.usuario;
  const rotaPublica = ['/', '/login'].includes(req.path);

  if (!user && rotaPublica) return next();
  if (!user) return res.redirect('/login');

  // Define layout dinâmico
  switch (user.perfil) {
    case "admin":
      res.locals.layout = "adminMain";
      break;
    case "dono":
      res.locals.layout = "donoMain";
      break;
    case "cliente":
      res.locals.layout = "clienteMain";
      break;
    default:
      res.locals.layout = "main";
  }

  return next();
};
```

backend>models>noSql>pedidos.js:
```
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const PedidoSchema = new Schema({
  id: { type: Number, required: true, unique: true }, 
  id_usuario: { type: Number, required: true },
  id_restaurante: { type: Number, required: true },
  pratos: [{
    nome: { type: String, required: true },
    descricao: String,
    preco: Number,
    comentarios: [{
      autor: String,
      texto: String,
      data: { type: Date, default: Date.now }
    }]
  }],
  total: { type: Number, required: true },
  status: { type: String, required: true, enum: ['Pendente', 'Em Preparação', 'Entregue'] },
  data: { type: Date, default: Date.now }
});

module.exports = mongoose.model("Pedido", PedidoSchema);
```

backend>models>noSql>restaurante.js:
```
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const RestauranteSchema = new Schema({
  id: { type: Number, required: true, unique: true },
  nome: { type: String, required: true },
  pratos: [{
    nome: { type: String, required: true },
    descricao: String,
    preco: Number,
    comentarios: [{
      autor: String,
      texto: String,
      data: { type: Date, default: Date.now }
    }]
  }]
});

module.exports = mongoose.model("Restaurante", RestauranteSchema);
```

backend>models>noSql>usuario.js:
```
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const UsuarioSchema = new Schema({
  id: { type: Number, required: true, unique: true },
  nome: { type: String, required: true },
  nascimento: { type: Date, required: true },
  email: { type: String, required: true, unique: true },
  senha: { type: String, required: true },
  enderecos: [{ type: Schema.Types.Number, ref: 'Endereco' }],
  restaurantes: [{ type: Schema.Types.Number, ref: 'Restaurante' }],
  perfil: { type: String, enum: ['admin', 'dono', 'cliente'], default: 'cliente' },
});

module.exports = mongoose.model("Usuario", UsuarioSchema);
```

backend>models>relational>usuario.js:
```
module.exports = (sequelize, Sequelize) => {
  const Usuario = sequelize.define('usuario', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true,
      allowNull: false,
      primaryKey: true
    },
    nome: {
      type: Sequelize.STRING,
      allowNull: false
    },
    nascimento: {
      type: Sequelize.DATE,
      allowNull: false
    },
    email: {
      type: Sequelize.STRING,
      allowNull: false,
      unique: true
    },
    senha: {
      type: Sequelize.STRING,
      allowNull: false
    },
    perfil: {
      type: Sequelize.STRING,
      allowNull: false,
      defaultValue: 'cliente',
    }
  }, {
    timestamps: true
  });
  return Usuario;
}
```

backend>models>relational>usuario_endereco.js:
```
module.exports = (sequelize, Sequelize) => {
  const UsuarioEndereco = sequelize.define('usuario_endereco', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true, allowNull: false, primaryKey: true
    },
    id_usuario: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'usuarios', key: 'id' }
    },
    id_endereco: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'enderecos', key: 'id' }
    }
  });
  return UsuarioEndereco;
}
```

backend>models>relational>enderecos.js:
```
module.exports = (sequelize, Sequelize) => {
	const Enderecos = sequelize.define('enderecos', {
		id: {
			type: Sequelize.INTEGER,
			autoIncrement: true, allowNull: false, primaryKey: true
		},
		cep: {
			type: Sequelize.STRING(10), allowNull: false
		},
		numero: {
			type: Sequelize.STRING, allowNull: false
		},
		complemento: {
			type: Sequelize.STRING, allowNull: false
		}
	});
	return Enderecos
		;
}
```

backend>models>relational>favoritos.js:
```
module.exports = (sequelize, Sequelize) => {
  const Favoritos = sequelize.define('favoritos', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true, allowNull: false, primaryKey: true
    },
    id_usuario: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'usuarios', key: 'id' }
    },
    id_restaurante: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'restaurantes', key: 'id' }
    }
  }, {
    timestamps: false
  });
  return Favoritos;
}
```

backend>models>relational>pedido.js:
```
module.exports = (sequelize, Sequelize) => {
  const Pedido = sequelize.define('pedido', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true, allowNull: false, primaryKey: true
    },
    id_usuario: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'usuarios', key: 'id' }
    },
    id_restaurante: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'restaurantes', key: 'id' }
    },
    data: {
      type: Sequelize.DATEONLY,
      allowNull: false
    },
    status: {
      type: Sequelize.STRING,
      allowNull: false
    }
  }, {
    timestamps: false
  });

  return Pedido;
};
```

backend>models>relational>prato.js:
```
module.exports = (sequelize, Sequelize) => {
  const Prato = sequelize.define('prato', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true, allowNull: false, primaryKey: true
    },
    nome: {
      type: Sequelize.STRING, allowNull: false
    },
    preco: {
      type: Sequelize.FLOAT, allowNull: false
    },
    id_restaurante: {
      type: Sequelize.INTEGER, allowNull: false,
      references: { model: 'restaurantes', key: 'id' }
    }
  }, {
    timestamps: false
  });
  return Prato;
}
```

backend>models>relational>restaurante.js:
```
module.exports = (sequelize, Sequelize) => {
  const Restaurante = sequelize.define('restaurante', {
    id: {
      type: Sequelize.INTEGER,
      autoIncrement: true, allowNull: false, primaryKey: true
    },
    nome: {
      type: Sequelize.STRING, allowNull: false
    }
  }, {
    timestamps: true
  });
  return Restaurante;
}
```

backend>swagger>swagger.json:
```
{
  "openapi": "3.0.0",
  "info": {
    "title": "API de Restaurante",
    "version": "1.0.0",
    "description": "Documentação da API para gerenciamento de restaurantes, pedidos, endereços e favoritos."
  },
  "servers": [
    {
      "url": "http://localhost:8081/api"
    }
  ],
  "paths": {
    "/usuario/login": {
      "post": {
        "summary": "Login de usuário",
        "operationId": "loginUsuario",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "senha": {
                    "type": "string"
                  }
                },
                "required": ["email", "senha"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login bem-sucedido"
          },
          "401": {
            "description": "Credenciais inválidas"
          }
        }
      }
    },
    "/usuario/usuarios": {
      "get": {
        "summary": "Lista todos os usuários",
        "operationId": "listarUsuarios",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de usuários",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Usuario"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Cria um novo usuário",
        "operationId": "criarUsuario",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Usuario"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Usuário criado com sucesso"
          }
        }
      }
    },
    "/usuario/usuarios/{id}": {
      "get": {
        "summary": "Detalha um usuário específico",
        "operationId": "detalharUsuario",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usuario"
                }
              }
            }
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        }
      },
      "put": {
        "summary": "Atualiza um usuário existente",
        "operationId": "atualizarUsuario",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Usuario"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usuário atualizado com sucesso"
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        }
      },
      "delete": {
        "summary": "Exclui um usuário",
        "operationId": "excluirUsuario",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Usuário excluído com sucesso"
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        }
      }
    },
    "/restaurante": {
      "get": {
        "summary": "Lista todos os restaurantes",
        "operationId": "listarRestaurantes",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de restaurantes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Restaurante"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Cria um novo restaurante",
        "operationId": "criarRestaurante",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurante"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Restaurante criado com sucesso"
          }
        }
      }
    },
    "/restaurante/{id}": {
      "get": {
        "summary": "Obtém um restaurante específico",
        "operationId": "obterRestaurante",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restaurante encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restaurante"
                }
              }
            }
          },
          "404": {
            "description": "Restaurante não encontrado"
          }
        }
      },
      "put": {
        "summary": "Atualiza um restaurante existente",
        "operationId": "atualizarRestaurante",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurante"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restaurante atualizado com sucesso"
          },
          "404": {
            "description": "Restaurante não encontrado"
          }
        }
      },
      "delete": {
        "summary": "Exclui um restaurante",
        "operationId": "excluirRestaurante",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Restaurante excluído com sucesso"
          },
          "404": {
            "description": "Restaurante não encontrado"
          }
        }
      }
    },
    "/pedido": {
      "post": {
        "summary": "Cria um novo pedido",
        "operationId": "criarPedido",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pedido"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pedido criado com sucesso"
          }
        }
      }
    },
    "/endereco": {
      "post": {
        "summary": "Cria um novo endereço",
        "operationId": "criarEndereco",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endereco"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Endereço criado com sucesso"
          }
        }
      }
    },
    "/favorito": {
      "post": {
        "summary": "Adiciona um favorito",
        "operationId": "adicionarFavorito",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Favorito"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Favorito adicionado com sucesso"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Usuario": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "nome": {
            "type": "string"
          },
          "nascimento": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "senha": {
            "type": "string"
          },
          "perfil": {
            "type": "string"
          }
        }
      },
      "Restaurante": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "nome": {
            "type": "string"
          },
          "endereco": {
            "type": "string"
          },
          "tipo": {
            "type": "string"
          }
        }
      },
      "Pedido": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "usuarioId": {
            "type": "string"
          },
          "restauranteId": {
            "type": "string"
          },
          "itens": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pratoId": {
                  "type": "string"
                },
                "quantidade": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "Endereco": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "usuarioId": {
            "type": "string"
          },
          "logradouro": {
            "type": "string"
          },
          "numero": {
            "type": "string"
          },
          "complemento": {
            "type": "string"
          },
          "bairro": {
            "type": "string"
          },
          "cidade": {
            "type": "string"
          },
          "estado": {
            "type": "string"
          },
          "cep": {
            "type": "string"
          }
        }
      },
      "Favorito": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "usuarioId": {
            "type": "string"
          },
          "restauranteId": {
            "type": "string"
          }
        }
      }
    }
  }
}
```

backend>app.js:
```
// backend/app.js
const express = require("express");
const cookieParser = require("cookie-parser");
const session = require("express-session");
const cors = require("cors");

const db = require("./config/db_sequelize");
const mongoose = require("./config/db_mongoose");

// Middlewares
const sessionControl = require("./middlewares/sessionControl");

// Rotas da API
const usuarioRoutes = require("./routers/api/usuario");
const enderecoRoutes = require("./routers/api/endereco");
const favoritoRoutes = require("./routers/api/favorito");
const pedidoRoutes = require("./routers/api/pedido");
const pratoRoutes = require("./routers/api/prato");
const restauranteRoutes = require("./routers/api/restaurante");
const usuarioEnderecoRoutes = require("./routers/api/usuarioEndereco");
const usuarioRestauranteRoutes = require("./routers/api/usuarioRestaurante");

// Swagger
const swaggerUi = require("swagger-ui-express");
const swaggerDocument = require("./swagger/swagger.json");

const app = express();

// Middleware padrão
app.use(cors({ origin: "http://localhost:3000", credentials: true }));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(
  session({
    secret: "seilaman",
    cookie: { maxAge: 30 * 60 * 1000 }, // 30 minutos
    resave: false,
    saveUninitialized: true,
  })
);

// Rotas da API
app.use("/api/usuario", usuarioRoutes);
app.use("/api/endereco", enderecoRoutes);
app.use("/api/favorito", favoritoRoutes);
app.use("/api/pedido", pedidoRoutes);
app.use("/api/prato", pratoRoutes);
app.use("/api/restaurante", restauranteRoutes);
app.use("/api/usuarioEndereco", usuarioEnderecoRoutes);
app.use("/api/usuarioRestaurante", usuarioRestauranteRoutes);

// Swagger
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Inicialização do servidor com sincronização do Sequelize
db.sequelize
  .sync()
  .then(() => {
    console.log("🟢 Banco sincronizado.");
    app.listen(8081, () => {
      console.log("Servidor no http://localhost:8081");
      console.log("Estado do Mongoose:", mongoose.connection.readyState);
    });
  })
  .catch((err) => {
    console.error("🔴 Erro ao sincronizar banco: ", err);
  });
```